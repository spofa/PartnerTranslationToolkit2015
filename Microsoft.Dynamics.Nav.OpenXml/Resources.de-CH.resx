<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WorksheetAlreadyExistError" xml:space="preserve">
    <value>Das Arbeitsblatt ist bereits vorhanden.</value>
  </data>
  <data name="RangeAlreadyExistError" xml:space="preserve">
    <value>Der Bereich ist bereits vorhanden.</value>
  </data>
  <data name="FilenameTypeError" xml:space="preserve">
    <value>Der Dokumenttyp ist ungültig. Prüfen Sie die Dateierweiterung.</value>
  </data>
  <data name="UriArgumentError" xml:space="preserve">
    <value>Ein gültiger Hyperlink muss angegeben werden.</value>
  </data>
  <data name="FilenameAlreadyExistError" xml:space="preserve">
    <value>Der Dateiname ist bereits vorhanden.</value>
  </data>
  <data name="CustomPropertiesArgumentError" xml:space="preserve">
    <value>Die benutzerdefinierte Eigenschaftensammlung darf nicht null sein.</value>
  </data>
  <data name="RangeNameNotFoundError" xml:space="preserve">
    <value>Der Bereichsname wurde nicht gefunden.</value>
  </data>
  <data name="DataElementPathCouldNotBeFound" xml:space="preserve">
    <value>{0} weist einen ungültigen Pfad auf. Die erforderlichen Elemente oder Abschnitte des XML-Schemas fehlen möglicherweise.</value>
  </data>
  <data name="EnumeratorOutOfRangeError" xml:space="preserve">
    <value>Der Enumerator liegt ausserhalb des gültigen Bereichs.</value>
  </data>
  <data name="CustomXmlPartWithNoRoot" xml:space="preserve">
    <value>Der benutzerdefinierte XML-Teil enthält kein Stammelement.</value>
  </data>
  <data name="PathArgumentError" xml:space="preserve">
    <value>Ein gültiger Pfad muss angegeben werden.</value>
  </data>
  <data name="CustomXmlInvalidNamespaceBinding" xml:space="preserve">
    <value>{0} weist einen ungültigen Namespace {1} auf.</value>
  </data>
  <data name="RangeValueNotSpecifiedError" xml:space="preserve">
    <value>Geben Sie einen Bereichswert an.</value>
  </data>
  <data name="FilenameNotSpecifiedError" xml:space="preserve">
    <value>Geben Sie einen Dateinamen an.</value>
  </data>
  <data name="WorksheetNotFoundError" xml:space="preserve">
    <value>Das Arbeitsblatt kann nicht gefunden werden.</value>
  </data>
  <data name="WorksheetPartNotFoundError" xml:space="preserve">
    <value>Der WorksheetPart kann nicht gefunden werden.</value>
  </data>
  <data name="NumberingFormatsError" xml:space="preserve">
    <value>Das benutzerdefinierte Nummerierungs-ID-Format sollte um {0} beginnen und aufeinander folgend aufgeführt werden.</value>
  </data>
  <data name="ColumnNameSizeError" xml:space="preserve">
    <value>Die Spaltenbeschriftung muss mindestens eine Breite von 1 aufweisen.</value>
  </data>
  <data name="ColumnLetterError" xml:space="preserve">
    <value>Die Spaltenüberschrift {0} muss ein Buchstabe zwischen "A" und "Z" sein.</value>
  </data>
  <data name="CustomXmlElementRemovedInDesign" xml:space="preserve">
    <value>Der benutzerdefinierte XML-Teil im Word-Layoutdokument verweist auf ein Feld oder DataItem mit dem Pfad {0}. Dieses Element wurde aus dem Berichtsdatensatz entfernt.</value>
  </data>
  <data name="IncompatibleWorkbookError" xml:space="preserve">
    <value>Die Microsoft Excel-Arbeitsmappe kann nicht geöffnet werden. Dies kann aus einem der folgenden Gründe geschehen:
1. Der Pfad zur Datei ist eine Webadresse. Sie müssen über das Dialogfeld 'Datei öffnen' zur Datei navigieren oder die Datei lokal speichern und dann öffnen.
2. Die Arbeitsmappe wird nicht im Open XML-Dateiformat geöffnet. Speichern Sie in Microsoft Excel die Arbeitsmappe als Excel-Arbeitsmappe (.xlsx-Datei), und versuchen Sie dann die Anfrage noch einmal.
Der folgende Fehler ist aufgetreten: {0}.</value>
  </data>
  <data name="CorruptSpreadsheetDocumentError" xml:space="preserve">
    <value>Die Arbeitsmappe ist beschädigt. Der folgende Fehler ist aufgetreten: {0}.</value>
  </data>
  <data name="ColumnNameNotSpecifiedError" xml:space="preserve">
    <value>Geben Sie eine Spaltenbeschriftung an.</value>
  </data>
  <data name="DataValidationFormulaNotSpecifiedError" xml:space="preserve">
    <value>Geben Sie einen Datenvalidierungswert an.</value>
  </data>
  <data name="RangeNameNotSpecifiedError" xml:space="preserve">
    <value>Geben Sie einen Bereichsnamen an.</value>
  </data>
</root>