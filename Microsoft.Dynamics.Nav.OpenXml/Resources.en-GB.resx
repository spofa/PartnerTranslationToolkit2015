<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WorksheetAlreadyExistError" xml:space="preserve">
    <value>The worksheet already exists.</value>
  </data>
  <data name="RangeAlreadyExistError" xml:space="preserve">
    <value>The range already exists.</value>
  </data>
  <data name="FilenameTypeError" xml:space="preserve">
    <value>The document type is invalid. Verify the file extension.</value>
  </data>
  <data name="UriArgumentError" xml:space="preserve">
    <value>A valid hyperlink is required.</value>
  </data>
  <data name="FilenameAlreadyExistError" xml:space="preserve">
    <value>The file name already exists.</value>
  </data>
  <data name="CustomPropertiesArgumentError" xml:space="preserve">
    <value>Custom property collection cannot be null.</value>
  </data>
  <data name="RangeNameNotFoundError" xml:space="preserve">
    <value>The range name cannot be found.</value>
  </data>
  <data name="DataElementPathCouldNotBeFound" xml:space="preserve">
    <value>{0} has an invalid path. Required elements or sections of the XML schema may be missing.</value>
  </data>
  <data name="EnumeratorOutOfRangeError" xml:space="preserve">
    <value>The enumerator is out of range.</value>
  </data>
  <data name="CustomXmlPartWithNoRoot" xml:space="preserve">
    <value>The custom XML part does not contain a root element.</value>
  </data>
  <data name="PathArgumentError" xml:space="preserve">
    <value>Valid path is required.</value>
  </data>
  <data name="CustomXmlInvalidNamespaceBinding" xml:space="preserve">
    <value>{0} has an invalid namespace {1}.</value>
  </data>
  <data name="RangeValueNotSpecifiedError" xml:space="preserve">
    <value>Specify a range value.</value>
  </data>
  <data name="FilenameNotSpecifiedError" xml:space="preserve">
    <value>Specify a file name.</value>
  </data>
  <data name="WorksheetNotFoundError" xml:space="preserve">
    <value>The worksheet cannot be found.</value>
  </data>
  <data name="WorksheetPartNotFoundError" xml:space="preserve">
    <value>The WorksheetPart cannot be found.</value>
  </data>
  <data name="NumberingFormatsError" xml:space="preserve">
    <value>The custom numbering ID format should start at {0} and should be listed in consecutive order.</value>
  </data>
  <data name="ColumnNameSizeError" xml:space="preserve">
    <value>The column label should have a width of at least 1.</value>
  </data>
  <data name="ColumnLetterError" xml:space="preserve">
    <value>The column heading {0} should be a letter between 'A' and 'Z'.</value>
  </data>
  <data name="CustomXmlElementRemovedInDesign" xml:space="preserve">
    <value>The custom XML part in the Word layout document has a reference to a field or DataItem with path {0}. This item has been removed from the report dataset.</value>
  </data>
  <data name="IncompatibleWorkbookError" xml:space="preserve">
    <value>The Microsoft Excel workbook cannot be opened. This may be caused by one of the following reasons:
1. The path to the file is a web address. You must navigate to the file by using the Open File dialogue box, or you can save the file locally and then open it.
2. The workbook is not saved in the Open XML file format. In Microsoft Excel, save the workbook as an Excel workbook (.xlsx file), and then try your request again.
The following error occurred: {0}.</value>
  </data>
  <data name="CorruptSpreadsheetDocumentError" xml:space="preserve">
    <value>The workbook is corrupted. The following error occurred: {0}.</value>
  </data>
  <data name="ColumnNameNotSpecifiedError" xml:space="preserve">
    <value>Specify a column label.</value>
  </data>
  <data name="DataValidationFormulaNotSpecifiedError" xml:space="preserve">
    <value>Specify a data validation value.</value>
  </data>
  <data name="RangeNameNotSpecifiedError" xml:space="preserve">
    <value>Specify a range name.</value>
  </data>
</root>